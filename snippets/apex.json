{
    "Instance Of": {
        "body": [
            "if (${1:Variable} instanceof ${2:Type}) {",
            "    ${2:Type} ${3:castVariable} = (${2:Type}) ${1:Variable};",
            "    $0",
            "}"
        ],
        "description": "Check instance of and downcast",
        "prefix": "inst",
        "scope": "apex,apex-anon"
    },
    "Is Assignable": {
        "body": [
            "isAssignableFrom(${2:SourceType});"
        ],
        "description": "Check if Child Type is assignable from Source Type",
        "prefix": "isAssignableFrom",
        "scope": "apex,apex-anon"
    },
    "Future Method": {
        "body": [
            "@future",
            "public static void ${1:methodName}() {",
            "\t$0",
            "}"
        ],
        "description": "Future method.",
        "prefix": "@future",
        "scope": "apex,apex-anon"
    },
    "TestSetup": {
        "body": [
            "@TestSetup",
            "static void setup() {",
            "\t$0",
            "}"
        ],
        "description": "Test setup for creating data before test methods run.",
        "prefix": "@TestSetup",
        "scope": "apex,apex-anon"
    },
    "Invocable Method": {
        "body": [
            "@InvocableMethod(label='${1:Label}' description='${2:Description}' category='${3:Category}')",
            "public static List<${4:Type}> ${5:methodName}() {",
            "\t$0",
            "}"
        ],
        "description": "Invocable method.",
        "prefix": "@InvocableMethod",
        "scope": "apex,apex-anon"
    },
    "Loop through queried SObjects": {
        "body": [
            "for (${1:Type} ${2:variable} : [SELECT ${3:fieldsList} FROM ${1:Type}) {",
            "\t$0",
            "}"
        ],
        "prefix": "foro",
        "scope": "apex,apex-anon"
    },
    "System Assert": {
        "body": [
            "System.assert($0);"
        ],
        "prefix": [
            "sa",
            "System.assert"
        ],
        "scope": "apex,apex-anon"
    },
    "System Assert Equals": {
        "body": [
            "System.assertEquals(${1:expected}, ${2:actual});"
        ],
        "prefix": [
            "sae",
            "System.assertEquals"
        ],
        "scope": "apex,apex-anon"
    },
    "System Assert Equals Null": {
        "body": [
            "System.assertEquals(null, $0);"
        ],
        "prefix": [
            "san",
            "System.assertEquals"
        ],
        "scope": "apex,apex-anon"
    },
    "System Assert Fail": {
        "body": [
            "System.assert(false, $0);"
        ],
        "prefix": [
            "saf",
            "System.assert"
        ],
        "scope": "apex,apex-anon"
    },
    "System Assert Not Equals": {
        "body": [
            "System.assertNotEquals(${1:expected}, ${2:actual});"
        ],
        "prefix": [
            "sane",
            "System.assertNotEquals"
        ],
        "scope": "apex,apex-anon"
    },
    "System Assert Not Equals Null": {
        "body": [
            "System.assertNotEquals(null, $0);"
        ],
        "prefix": [
            "sann",
            "System.assertNotEquals"
        ],
        "scope": "apex,apex-anon"
    },
    "System Debug": {
        "body": [
            "System.debug(LoggingLevel.${1|DEBUG,ERROR,WARN,INFO,FINE,FINER,FINEST,NONE|}, '$2: ' + $0);"
        ],
        "description": "Debug ",
        "prefix": [
            "sd",
            "System.debug"
        ],
        "scope": "apex,apex-anon"
    },
    "System Debug Serialize Pretty": {
        "body": [
            "System.debug(LoggingLevel.${1|DEBUG,ERROR,WARN,INFO,FINE,FINER,FINEST,NONE|}, '$2: ' + JSON.SerializePretty($0));"
        ],
        "description": "System.debug(JSON.SerializePretty())",
        "prefix": [
            "sdp",
            "System.debug"
        ],
        "scope": "apex,apex-anon"
    },
    "System Run As": {
        "body": [
            "System.runAs(${1:user}) {",
            "\t$0",
            "}"
        ],
        "description": "System Run As User statement.",
        "prefix": [
            "sra",
            "System.runAs"
        ],
        "scope": "apex,apex-anon"
    }
}
