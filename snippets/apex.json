{
    "Assert Are Equals": {
        "body": [
            "Assert.areEqual(${1:expected}, ${2:actual}, ${3:message});",
            "$0"
        ],
        "description": "Assert equals condition in a test",
        "prefix": "aae",
        "scope": "apex,apex-anon"
    },
    "Assert Are Not Equals": {
        "body": [
            "Assert.areNotEqual(${1:expected}, ${2:actual}, ${3:message});",
            "$0"
        ],
        "description": "Assert not equals condition in a test",
        "prefix": "aane",
        "scope": "apex,apex-anon"
    },
    "Assert Fail": {
        "body": [
            "Assert.fail(${1:message});",
            "$0"
        ],
        "description": "Immediately return an error",
        "prefix": "af",
        "scope": "apex,apex-anon"
    },
    "Assert Is False": {
        "body": [
            "Assert.isFalse(${1:condition}, ${2:message});",
            "$0"
        ],
        "description": "Asserts that the specified condition is false",
        "prefix": "aif",
        "scope": "apex,apex-anon"
    },
    "Assert Is Instance of type": {
        "body": [
            "Assert.isInstanceOfType(${1:ObjectInstance}, ${2:SystemType}, ${3:message});",
            "$0"
        ],
        "description": "Asserts that the instance is of the specified type",
        "prefix": "aii",
        "scope": "apex,apex-anon"
    },
    "Assert Is Not Instance of type": {
        "body": [
            "Assert.isNotInstanceOfType(${1:ObjectInstance}, ${2:SystemType}, ${3:message});",
            "$0"
        ],
        "description": "Asserts that the instance isn’t of the specified type",
        "prefix": "aini",
        "scope": "apex,apex-anon"
    },
    "Assert Is Not Null": {
        "body": [
            "Assert.isNotNull(${1:variable}, ${2:message});",
            "$0"
        ],
        "description": "Asserts that the value isn’t null.",
        "prefix": "ainn",
        "scope": "apex,apex-anon"
    },
    "Assert Is Null": {
        "body": [
            "Assert.isNull(${1:variable}, ${2:message});",
            "$0"
        ],
        "description": "Asserts that the value is null.",
        "prefix": "ain",
        "scope": "apex,apex-anon"
    },
    "Assert Is True": {
        "body": [
            "Assert.isTrue(${1:condition}, ${2:message});",
            "$0"
        ],
        "description": "Asserts that the specified condition is true",
        "prefix": "ait",
        "scope": "apex,apex-anon"
    },
    "Database Execute Batch": {
        "body": [
            "Id ${1:jobIdVariable} = Database.executeBatch(${2:batchInstance}, ${3:batchSize});$0"
        ],
        "description": "Execute a batch",
        "prefix": "deb",
        "scope": "apex,apex-anon"
    },
    "For Loop for queried SObjects": {
        "body": [
            "for (${1:Type} ${2:variable} : [SELECT ${3:fieldsList} FROM ${1:Type}) {",
            "\t$0",
            "}"
        ],
        "description": "Create for loop for results of SOQL query",
        "prefix": "foro",
        "scope": "apex,apex-anon"
    },
    "For loop for elements of an array": {
        "body": [
            "for (Integer ${1:loopVariable} = 0; ${1:loopVariable} < ${2:selectedArray}.size(); ${1:loopVariable}++) {",
            "\t${3:ArrayElementType} ${4:elementName} = ${2:selectedArray}[${1:loopVariable}];",
            "\t$0",
            "}"
        ],
        "description": "Create for loop for elements of an array",
        "prefix": "itar",
        "scope": "apex,apex-anon"
    },
    "For loop for entries of a Map": {
        "body": [
            "for (${1:SelectedMapKeyType} ${2:keyVariableName} : ${3:selectedMap}.keySet()) {",
            "\t${4:SelectedMapValueType} ${5:valueVariableName} = ${3:selectedMap}.get(${2:keyVariableName});",
            "\t$0",
            "}"
        ],
        "description": "Create for loop for entries of a Map",
        "prefix": "itme",
        "scope": "apex,apex-anon"
    },
    "For loop for elements of an array in reversed order": {
        "body": [
            "for (Integer ${1:loopVariable} = ${2:selectedArray}.size()-1; ${1:loopVariable} >= 0; ${1:loopVariable}--) {",
            "\t${3:ArrayElementType} ${4:elementName} = ${2:selectedArray}[${1:loopVariable}];",
            "\t$0",
            "}"
        ],
        "description": "Create for loop for elements of an array in reversed order",
        "prefix": "ritar",
        "scope": "apex,apex-anon"
    },
    "Future Method": {
        "body": [
            "@future",
            "public static void ${1:methodName}() {",
            "\t$0",
            "}"
        ],
        "description": "Future method.",
        "prefix": "@future",
        "scope": "apex,apex-anon"
    },
    "If": {
        "body": [
            "if(${1:condition}) {",
            "\t$0",
            "}"
        ],
        "description": "If statement",
        "prefix": "if",
        "scope": "apex,apex-anon"
    },
    "If Else": {
        "body": [
            "if(${1:condition}) {",
            "\t$0",
            "} else {",
            "\t",
            "}"
        ],
        "description": "If statement",
        "prefix": "ife",
        "scope": "apex,apex-anon"
    },
    "Instance Of": {
        "body": [
            "if (${1:Variable} instanceof ${2:Type}) {",
            "\t${2:Type} ${3:castVariable} = (${2:Type}) ${1:Variable};",
            "\t$0",
            "}"
        ],
        "description": "Check instance of and downcast",
        "prefix": "inst",
        "scope": "apex,apex-anon"
    },
    "Invocable Method": {
        "body": [
            "@InvocableMethod(label='${1:Label}' description='${2:Description}' category='${3:Category}')",
            "public static List<${4:Type}> ${5:methodName}() {",
            "\t$0",
            "}"
        ],
        "description": "Invocable method.",
        "prefix": "@InvocableMethod",
        "scope": "apex,apex-anon"
    },
    "Is Assignable": {
        "body": [
            "isAssignableFrom(${2:SourceType});"
        ],
        "description": "Check if Child Type is assignable from Source Type",
        "prefix": "isAssignableFrom",
        "scope": "apex,apex-anon"
    },
    "Last element of list": {
        "body": [
            "${1:selectedList}[${1:selectedList}.size() - 1]$0"
        ],
        "description": "Get last element of list",
        "prefix": "lst",
        "scope": "apex,apex-anon"
    },
    "Lazy instantiation": {
        "body": [
            "if (${1:selectedVariable} == null) {",
            "\t${1:selectedVariable} = new ${2:SelectedVariableType}($0);",
            "}"
        ],
        "description": "Lazy instantiation",
        "prefix": "lazy",
        "scope": "apex,apex-anon"
    },
    "New List": {
        "body": [
            "List<${1:ElementType}> ${2:newListName} = new List<${1:ElementType}>();$0"
        ],
        "description": "Construct a new list and assign to a local variable",
        "prefix": "nl",
        "scope": "apex,apex-anon"
    },
    "New Map": {
        "body": [
            "Map<${1:KeyType}, ${2:ValueType}> ${3:newMapName} = new Map<${1:KeyType}, ${2:ValueType}>();$0"
        ],
        "description": "Construct a new map and assign to a local variable",
        "prefix": "nm",
        "scope": "apex,apex-anon"
    },
    "New Set": {
        "body": [
            "Set<${1:ElementType}> ${2:newSetName} = new Set<${1:ElementType}>();$0"
        ],
        "description": "Construct a new map and assign to a local variable",
        "prefix": "ns",
        "scope": "apex,apex-anon"
    },
    "New Set of Ids from list of records": {
        "body": [
            "Set<Id> ${1:setName} = new Map<Id, ${2:SObjectType}>(${3:recordList}).keySet();"
        ],
        "description": "Create set of Ids from list of records",
        "prefix": "nsfl",
        "scope": "apex,apex-anon"
    },
    "New Map from list of records": {
        "body": [
            "Map<Id, ${1:SObject}> ${2:mapName} = new Map<Id, ${1}>(${3:recordList});"
        ],
        "description": "Create map from list of records",
        "prefix": "nmfl",
        "scope": "apex,apex-anon"
    },
    "Property Read Only": {
        "body": [
            "{get; private set;}"
        ],
        "description": "Create read-only property getter and setter",
        "prefix": "pro",
        "scope": "apex,apex-anon"
    },
    "Property Read Write": {
        "body": [
            "{get; set;}"
        ],
        "description": "Create read/write property getter and setter",
        "prefix": "prw",
        "scope": "apex,apex-anon"
    },
    "Public Static Final": {
        "body": [
            "public static final"
        ],
        "description": "Begin declaration of a public static final field",
        "prefix": "psf",
        "scope": "apex,apex-anon"
    },
    "Public Static Final Integer": {
        "body": [
            "public static final Integer"
        ],
        "description": "Begin declaration of a public static final Integer field",
        "prefix": "psfi",
        "scope": "apex,apex-anon"
    },
    "Public Static Final String": {
        "body": [
            "public static final String"
        ],
        "description": "Begin declaration of a public static final String field",
        "prefix": "psfs",
        "scope": "apex,apex-anon"
    },
    "Select": {
        "body": [
            "SELECT ${2:FieldsList} FROM ${1:SObject}$0"
        ],
        "description": "Create a SOQL query",
        "prefix": "SEL",
        "scope": "apex,apex-anon"
    },
    "Select All Fields": {
        "body": [
            "SELECT FIELDS(ALL) FROM ${1:SObject}$0 LIMIT 200"
        ],
        "description": "Create a SOQL query with all fields",
        "prefix": "SELALL",
        "scope": "apex,apex-anon"
    },
    "Select to map": {
        "body": [
            "Map<Id, ${1:SObjectType}> ${2:variableName} = new Map<Id, ${1:SObjectType}>([SELECT ${3:fieldsList} FROM ${1:SObjectType} $0]);"
        ],
        "description": "Create a SOQL query and assign result to map",
        "prefix": "sqm",
        "scope": "apex,apex-anon"
    },
    "Select to list": {
        "body": [
            "List<${1:SObjectType}> ${2:variableName} = [SELECT ${3:fieldsList} FROM ${1:SObjectType}$0];"
        ],
        "description": "Create a SOQL query and assign result to list",
        "prefix": "sql",
        "scope": "apex,apex-anon"
    },
    "Select to list single record": {
        "body": [
            "List<${1:SObjectType}> ${2:variableName} = [SELECT ${3:fieldsList} FROM ${1:SObjectType}$4 LIMIT 1];",
            "${1:SObjectType} ${5:singleVariableName} = ${2:variableName}.size() == 1 ? ${2:variableName}.get(0) : null;$0"
        ],
        "description": "Create a SOQL query and assign result safely to list",
        "prefix": "sql1",
        "scope": "apex,apex-anon"
    },
    "System Assert": {
        "body": [
            "System.assert(${1:expected}, ${2:message});"
        ],
        "description": "Assert a condition in a unit test",
        "prefix": [
            "sa",
            "System.assert"
        ],
        "scope": "apex,apex-anon"
    },
    "System Assert Equals": {
        "body": [
            "System.assertEquals(${1:expected}, ${2:actual}, ${3:message});"
        ],
        "description": "Assert that a value is an expected value in a unit test",
        "prefix": [
            "sae",
            "System.assertEquals"
        ],
        "scope": "apex,apex-anon"
    },
    "System Assert Equals Null": {
        "body": [
            "System.assertEquals(null, $0, ${1:message});"
        ],
        "description": "Assert that a value is null in a unit test",
        "prefix": [
            "san",
            "System.assertEquals"
        ],
        "scope": "apex,apex-anon"
    },
    "System Assert Fail": {
        "body": [
            "System.assert(false, $0);"
        ],
        "description": "Fail unit test when this assert is reached",
        "prefix": [
            "saf",
            "System.assertFail"
        ],
        "scope": "apex,apex-anon"
    },
    "System Assert Not Equals": {
        "body": [
            "System.assertNotEquals(${1:expected}, ${2:actual}, ${3:message});"
        ],
        "description": "Assert that a value is not an expected value in a unit test",
        "prefix": [
            "sane",
            "System.assertNotEquals"
        ],
        "scope": "apex,apex-anon"
    },
    "System Assert Not Equals Null": {
        "body": [
            "System.assertNotEquals(null, $0, ${1:message});"
        ],
        "description": "Assert that a value is not null in a unit test ",
        "prefix": [
            "sann",
            "System.assertNotEquals"
        ],
        "scope": "apex,apex-anon"
    },
    "System Debug": {
        "body": [
            "System.debug(LoggingLevel.${1|DEBUG,ERROR,WARN,INFO,FINE,FINER,FINEST,NONE|}, '$2: ' + $0);"
        ],
        "description": "Debug",
        "prefix": [
            "sd",
            "System.debug"
        ],
        "scope": "apex,apex-anon"
    },
    "System Debug Serialize Pretty": {
        "body": [
            "System.debug(LoggingLevel.${1|DEBUG,ERROR,WARN,INFO,FINE,FINER,FINEST,NONE|}, '$2: ' + JSON.SerializePretty($0));"
        ],
        "description": "Debug objects or collections",
        "prefix": [
            "sdp",
            "System.debug"
        ],
        "scope": "apex,apex-anon"
    },
    "System Run As": {
        "body": [
            "System.runAs(${1:user}) {",
            "\t$0",
            "}"
        ],
        "description": "System Run As User statement.",
        "prefix": [
            "sra",
            "System.runAs"
        ],
        "scope": "apex,apex-anon"
    },
    "Test Method": {
        "body": [
            "@IsTest",
            "static void ${1:testMethodName}() {",
            "\t$0",
            "\tTest.startTest();",
            "\t",
            "\tTest.stopTest();",
            "}"
        ],
        "description": "Test setup for creating data before test methods run.",
        "prefix": [
            "tstm",
            "@TestMethod"
        ],
        "scope": "apex,apex-anon"
    },
    "TestSetup": {
        "body": [
            "@TestSetup",
            "static void setup() {",
            "\t$0",
            "}"
        ],
        "description": "Test setup for creating data before test methods run.",
        "prefix": [
            "tsts",
            "@TestSetup"
        ],
        "scope": "apex,apex-anon"
    },
    "Throw exception": {
        "prefix": "thr",
        "scope": "apex,apex-anon",
        "body": [
            "throw new ${1:exceptionType}($0);"
        ],
        "description": "Throw an exception"
    },
    "Try Catch": {
        "prefix": "tc",
        "scope": "apex,apex-anon",
        "body": [
            "try {",
            "\t$0",
            "} catch (${1:exceptionType}) {",
            "\t",
            "}"
        ],
        "description": "Try Catch statement."
    },
    "Try Catch Finally": {
        "prefix": "tcf",
        "scope": "apex,apex-anon",
        "body": [
            "try {",
            "\t$0",
            "} catch (${1:exceptionType}) {",
            "\t",
            "} finally {",
            "\t",
            "}"
        ],
        "description": "Try Catch statement."
    },
    "While": {
        "prefix": "wh",
        "scope": "apex,apex-anon",
        "body": [
            "while (${1:condition}) {",
            "\t$0",
            "}"
        ],
        "description": "While statement."
    }
}