{
    "Assert Are Equals": {
        "body": [
            "Assert.areEqual(${1:expected}, ${2:actual}, ${3:message});",
            "$0"
        ],
        "description": "Assert equals condition in a test",
        "prefix": [
            "assertAreEqual",
            "Assert.areEqual",
            "aae"
        ],
        "scope": "apex,apex-anon"
    },
    "Assert Are Not Equals": {
        "body": [
            "Assert.areNotEqual(${1:expected}, ${2:actual}, ${3:message});",
            "$0"
        ],
        "description": "Assert not equals condition in a test",
        "prefix": [
            "assertAreNotEqual",
            "Assert.areNotEqual",
            "aane"
        ],
        "scope": "apex,apex-anon"
    },
    "Assert Fail": {
        "body": [
            "Assert.fail(${1:message});",
            "$0"
        ],
        "description": "Immediately return an error",
        "prefix": [
            "assertFail",
            "Assert.fail",
            "af"
        ],
        "scope": "apex,apex-anon"
    },
    "Assert Is False": {
        "body": [
            "Assert.isFalse(${1:condition}, ${2:message});",
            "$0"
        ],
        "description": "Asserts that the specified condition is false",
        "prefix": [
            "assertIsFalse",
            "Assert.isFalse",
            "aif"
        ],
        "scope": "apex,apex-anon"
    },
    "Assert Is Instance of type": {
        "body": [
            "Assert.isInstanceOfType(${1:ObjectInstance}, ${2:SystemType}, ${3:message});",
            "$0"
        ],
        "description": "Asserts that the instance is of the specified type",
        "prefix": [
            "assertIsInstanceOfType",
            "Assert.isInstanceOfType",
            "aii"
        ],
        "scope": "apex,apex-anon"
    },
    "Assert Is Not Instance of type": {
        "body": [
            "Assert.isNotInstanceOfType(${1:ObjectInstance}, ${2:SystemType}, ${3:message});",
            "$0"
        ],
        "description": "Asserts that the instance isn’t of the specified type",
        "prefix": [
            "assertIsNotInstanceOfType",
            "Assert.isNotInstanceOfType",
            "aini"
        ],
        "scope": "apex,apex-anon"
    },
    "Assert Is Not Null": {
        "body": [
            "Assert.isNotNull(${1:variable}, ${2:message});",
            "$0"
        ],
        "description": "Asserts that the value isn’t null.",
        "prefix": [
            "assertIsNotNull",
            "Assert.isNotNull",
            "ainn"
        ],
        "scope": "apex,apex-anon"
    },
    "Assert Is Null": {
        "body": [
            "Assert.isNull(${1:variable}, ${2:message});",
            "$0"
        ],
        "description": "Asserts that the value is null.",
        "prefix": [
            "assertIsNull",
            "Assert.isNull",
            "ain"
        ],
        "scope": "apex,apex-anon"
    },
    "Assert Is True": {
        "body": [
            "Assert.isTrue(${1:condition}, ${2:message});",
            "$0"
        ],
        "description": "Asserts that the specified condition is true",
        "prefix": [
            "assertIsTrue",
            "Assert.isTrue",
            "ait"
        ],
        "scope": "apex,apex-anon"
    },
    "Database Count Query": {
        "body": [
            "Integer ${1:recordsAmount} = Database.countQuery(${2:queryString})$0"
        ],
        "description": "eturns the number of records that a dynamic SOQL query.",
        "prefix": [
            "Database.countQuery"
        ],
        "scope": "apex,apex-anon"
    },
    "Database Delete": {
        "body": [
            "List<Database.DeleteResult> ${1:deleteResults} = Database.delete(${2:recordsToDelete}, ${3:allOrNone});$0"
        ],
        "description": "Deletes a list of existing sObject records.",
        "prefix": [
            "Database.delete"
        ],
        "scope": "apex,apex-anon"
    },
    "Database Execute Batch": {
        "body": [
            "Id ${1:jobIdVariable} = Database.executeBatch(${2:batchInstance}, ${3:batchSize});$0"
        ],
        "description": "Execute a batch",
        "prefix": [
            "Database.executeBatch",
            "deb"
        ],
        "scope": "apex,apex-anon"
    },
    "Database Insert": {
        "body": [
            "List<Database.SaveResult> ${1:saveResults} = Database.insert(${2:recordsToInsert}, ${3:allOrNone});$0"
        ],
        "description": "Adds one or more sObjects.",
        "prefix": [
            "Database.insert"
        ],
        "scope": "apex,apex-anon"
    },
    "Database Update": {
        "body": [
            "List<Database.SaveResult> ${1:updateResults} = Database.update(${2:recordsToUpdate}, ${3:allOrNone});$0"
        ],
        "description": "Modifies one or more existing sObject records.",
        "prefix": [
            "Database.update"
        ],
        "scope": "apex,apex-anon"
    },
    "For loop for elements of an array": {
        "body": [
            "for (Integer ${1:loopVariable} = 0; ${1:loopVariable} < ${2:selectedArray}.size(); ${1:loopVariable}++) {",
            "\t${3:ArrayElementType} ${4:elementName} = ${2:selectedArray}[${1:loopVariable}];",
            "\t$0",
            "}"
        ],
        "description": "Create for loop for elements of an array",
        "prefix": [
            "fori",
            "itar"
        ],
        "scope": "apex,apex-anon"
    },
    "For loop for elements of an array in reversed order": {
        "body": [
            "for (Integer ${1:loopVariable} = ${2:selectedArray}.size()-1; ${1:loopVariable} >= 0; ${1:loopVariable}--) {",
            "\t${3:ArrayElementType} ${4:elementName} = ${2:selectedArray}[${1:loopVariable}];",
            "\t$0",
            "}"
        ],
        "description": "Create for loop for elements of an array in reversed order",
        "prefix": [
            "forReversedOrder",
            "ritar"
        ],
        "scope": "apex,apex-anon"
    },
    "For loop for entries of a Map": {
        "body": [
            "for (${1:SelectedMapKeyType} ${2:keyVariableName} : ${3:selectedMap}.keySet()) {",
            "\t${4:SelectedMapValueType} ${5:valueVariableName} = ${3:selectedMap}.get(${2:keyVariableName});",
            "\t$0",
            "}"
        ],
        "description": "Create for loop for entries of a Map",
        "prefix": [
            "forMap",
            "itme"
        ],
        "scope": "apex,apex-anon"
    },
    "For Loop for queried SObjects": {
        "body": [
            "for (${1:Type} ${2:variable} : [SELECT ${3:fieldsList} FROM ${1:Type}) {",
            "\t$0",
            "}"
        ],
        "description": "Create for loop for results of SOQL query",
        "prefix": [
            "forSoql",
            "foro"
        ],
        "scope": "apex,apex-anon"
    },
    "Future Method": {
        "body": [
            "@future",
            "public static void ${1:methodName}() {",
            "\t$0",
            "}"
        ],
        "description": "Future method.",
        "prefix": "future",
        "scope": "apex,apex-anon"
    },
    "If": {
        "body": [
            "if(${1:condition}) {",
            "\t$0",
            "}"
        ],
        "description": "If statement",
        "prefix": "if",
        "scope": "apex,apex-anon"
    },
    "If Else": {
        "body": [
            "if(${1:condition}) {",
            "\t$0",
            "} else {",
            "\t",
            "}"
        ],
        "description": "If statement",
        "prefix": [
            "ifElse",
            "ife"
        ],
        "scope": "apex,apex-anon"
    },
    "Instance Of": {
        "body": [
            "if (${1:Variable} instanceof ${2:Type}) {",
            "\t${2:Type} ${3:castVariable} = (${2:Type}) ${1:Variable};",
            "\t$0",
            "}"
        ],
        "description": "Check instance of and downcast",
        "prefix": [
            "instanceOf",
            "inst"
        ],
        "scope": "apex,apex-anon"
    },
    "Invocable Method": {
        "body": [
            "@InvocableMethod(label='${1:Label}' description='${2:Description}' category='${3:Category}')",
            "public static List<${4:Type}> ${5:methodName}() {",
            "\t$0",
            "}"
        ],
        "description": "Invocable method.",
        "prefix": "invocableMethod",
        "scope": "apex,apex-anon"
    },
    "Is Assignable": {
        "body": [
            "isAssignableFrom(${2:SourceType});"
        ],
        "description": "Check if Child Type is assignable from Source Type",
        "prefix": "isAssignableFrom",
        "scope": "apex,apex-anon"
    },
    "JSON Deserialize": {
        "body": [
            "${1:ApexType} ${2:result} = (${1:ApexType}) JSON.deserialize(${3:jsonString}, ${1:ApexType}.class);$0"
        ],
        "description": "Deserializes the specified JSON string into an Apex object of the specified type.",
        "prefix": [
            "JSON.deserialize"
        ],
        "scope": "apex,apex-anon"
    },
    "JSON Deserialize Strict": {
        "body": [
            "${1:ApexType} ${2:result} = (${1:ApexType}) JSON.deserializeStrict(${3:jsonString}, ${1:ApexType}.class);$0"
        ],
        "description": "Deserializes the specified JSON string into an Apex object of the specified type.",
        "prefix": [
            "JSON.deserializeStrict"
        ],
        "scope": "apex,apex-anon"
    },
    "JSON Serialize": {
        "body": [
            "String ${1:serializedResult} = JSON.serialize(${2:objectToSerialize});$0"
        ],
        "description": "Serializes Apex objects into JSON content.",
        "prefix": [
            "JSON.serialize"
        ],
        "scope": "apex,apex-anon"
    },
    "JSON Serialize Pretty": {
        "body": [
            "String ${1:serializedResult} = JSON.serializePretty(${2:objectToSerialize});$0"
        ],
        "description": "Serializes Apex objects into JSON content.",
        "prefix": [
            "JSON.serializePretty"
        ],
        "scope": "apex,apex-anon"
    },
    "Last element of list": {
        "body": [
            "${1:selectedList}[${1:selectedList}.size() - 1]$0"
        ],
        "description": "Get last element of list",
        "prefix": [
            "lastListElement",
            "lst"
        ],
        "scope": "apex,apex-anon"
    },
    "Lazy instantiation": {
        "body": [
            "if (${1:selectedVariable} == null) {",
            "\t${1:selectedVariable} = new ${2:SelectedVariableType}($0);",
            "}"
        ],
        "description": "Lazy instantiation",
        "prefix": "lazy",
        "scope": "apex,apex-anon"
    },
    "New List": {
        "body": [
            "List<${1:ElementType}> ${2:newListName} = new List<${1:ElementType}>();$0"
        ],
        "description": "Construct a new list and assign to a local variable",
        "prefix": [
            "list",
            "nl"
        ],
        "scope": "apex,apex-anon"
    },
    "New Map": {
        "body": [
            "Map<${1:KeyType}, ${2:ValueType}> ${3:newMapName} = new Map<${1:KeyType}, ${2:ValueType}>();$0"
        ],
        "description": "Construct a new map and assign to a local variable",
        "prefix": [
            "map",
            "nm"
        ],
        "scope": "apex,apex-anon"
    },
    "New Map from list of records": {
        "body": [
            "Map<Id, ${1:SObject}> ${2:mapName} = new Map<Id, ${1}>(${3:recordList});"
        ],
        "description": "Create map from list of records",
        "prefix": [
            "mapFromList",
            "nmfl"
        ],
        "scope": "apex,apex-anon"
    },
    "New Set": {
        "body": [
            "Set<${1:ElementType}> ${2:newSetName} = new Set<${1:ElementType}>();$0"
        ],
        "description": "Construct a new map and assign to a local variable",
        "prefix": [
            "set",
            "ns"
        ],
        "scope": "apex,apex-anon"
    },
    "New Set of Ids from list of records": {
        "body": [
            "Set<Id> ${1:setName} = new Map<Id, ${2:SObjectType}>(${3:recordList}).keySet();"
        ],
        "description": "Create set of Ids from list of records",
        "prefix": [
            "setOfIds",
            "nsfl"
        ],
        "scope": "apex,apex-anon"
    },
    "Property Read Only": {
        "body": [
            "{get; private set;}"
        ],
        "description": "Create read-only property getter and setter",
        "prefix": "pro",
        "scope": "apex,apex-anon"
    },
    "Property Read Write": {
        "body": [
            "{get; set;}"
        ],
        "description": "Create read/write property getter and setter",
        "prefix": "prw",
        "scope": "apex,apex-anon"
    },
    "Public Static Final": {
        "body": [
            "public static final"
        ],
        "description": "Begin declaration of a public static final field",
        "prefix": [
            "final",
            "psf"
        ],
        "scope": "apex,apex-anon"
    },
    "Public Static Final Integer": {
        "body": [
            "public static final Integer ${1:VARIABLE_NAME} = ${2:value};"
        ],
        "description": "Begin declaration of a public static final Integer field",
        "prefix": [
            "finalInteger",
            "psfi"
        ],
        "scope": "apex,apex-anon"
    },
    "Public Static Final String": {
        "body": [
            "public static final String ${1:VARIABLE_NAME} = ${2:value};"
        ],
        "description": "Begin declaration of a public static final String field",
        "prefix": [
            "finalString",
            "psfs"
        ],
        "scope": "apex,apex-anon"
    },
    "Select": {
        "body": [
            "SELECT ${2:FieldsList} FROM ${1:SObject}$0"
        ],
        "description": "Create a SOQL query",
        "prefix": [
            "select",
            "SEL"
        ],
        "scope": "apex,apex-anon"
    },
    "Select All Fields": {
        "body": [
            "SELECT FIELDS(ALL) FROM ${1:SObject}$0 LIMIT 200"
        ],
        "description": "Create a SOQL query with all fields",
        "prefix": [
            "selectAll",
            "SELALL"
        ],
        "scope": "apex,apex-anon"
    },
    "Select to list": {
        "body": [
            "List<${1:SObjectType}> ${2:variableName} = [SELECT ${3:fieldsList} FROM ${1:SObjectType}$0];"
        ],
        "description": "Create a SOQL query and assign result to list",
        "prefix": [
            "SelectToList",
            "sql"
        ],
        "scope": "apex,apex-anon"
    },
    "Select to list single record": {
        "body": [
            "List<${1:SObjectType}> ${2:variableName} = [SELECT ${3:fieldsList} FROM ${1:SObjectType}$4 LIMIT 1];",
            "${1:SObjectType} ${5:singleVariableName} = ${2:variableName}.size() == 1 ? ${2:variableName}.get(0) : null;$0"
        ],
        "description": "Create a SOQL query and assign result safely to list",
        "prefix": [
            "SelectToObject",
            "sql1"
        ],
        "scope": "apex,apex-anon"
    },
    "Select to map": {
        "body": [
            "Map<Id, ${1:SObjectType}> ${2:variableName} = new Map<Id, ${1:SObjectType}>([SELECT ${3:fieldsList} FROM ${1:SObjectType} $0]);"
        ],
        "description": "Create a SOQL query and assign result to map",
        "prefix": [
            "selectToMap",
            "sqm"
        ],
        "scope": "apex,apex-anon"
    },
    "String escapeSingleQuotes": {
        "body": [
            "String result = String.escapeSingleQuotes(${1:stringToEscape});"
        ],
        "description": "String.escapeSingleQuotes",
        "prefix": [
            "String.escapeSingleQuotes"
        ],
        "scope": "apex,apex-anon"
    },
    "String format": {
        "body": [
            "String template = '{0} was last updated {1}';",
            "List<Object> parameters = new List<Object>{ 'Universal Containers', DateTime.newInstance(2018, 11, 15) };",
            "String formatted = String.format(${1:template}, ${2:parameters});"
        ],
        "description": "String.format",
        "prefix": [
            "String.format"
        ],
        "scope": "apex,apex-anon"
    },
    "String isBlank": {
        "body": [
            "String.isBlank(${1:inputString})"
        ],
        "description": "String.isBlank",
        "prefix": [
            "String.isBlank"
        ],
        "scope": "apex,apex-anon"
    },
    "String isNotBlank": {
        "body": [
            "String.isNotBlank(${1:inputString})"
        ],
        "description": "String.isNotBlank",
        "prefix": [
            "String.isNotBlank"
        ],
        "scope": "apex,apex-anon"
    },
    "String isNotEmpty": {
        "body": [
            "String.isNotEmpty(${1:inputString})"
        ],
        "description": "String.isNotEmpty",
        "prefix": [
            "String.isNotEmpty"
        ],
        "scope": "apex,apex-anon"
    },
    "String join": {
        "body": [
            "String result = String.join(${1:iterableObj}, '${2:separator}');"
        ],
        "description": "String.join",
        "prefix": [
            "String.join"
        ],
        "scope": "apex,apex-anon"
    },
    "String valueOf": {
        "body": [
            "String result = String.valueOf(${1:valueToConvert});"
        ],
        "description": "String.valueOf",
        "prefix": [
            "String.valueOf"
        ],
        "scope": "apex,apex-anon"
    },
    "System Assert": {
        "body": [
            "System.assert(${1:expected}, ${2:message});"
        ],
        "description": "Assert a condition in a unit test",
        "prefix": [
            "systemAssert",
            "sa"
        ],
        "scope": "apex,apex-anon"
    },
    "System Assert Equals": {
        "body": [
            "System.assertEquals(${1:expected}, ${2:actual}, ${3:message});"
        ],
        "description": "Assert that a value is an expected value in a unit test",
        "prefix": [
            "systemAssertEquals",
            "sae"
        ],
        "scope": "apex,apex-anon"
    },
    "System Assert Equals Null": {
        "body": [
            "System.assertEquals(null, $0, ${1:message});"
        ],
        "description": "Assert that a value is null in a unit test",
        "prefix": [
            "systemAssertEquals",
            "san"
        ],
        "scope": "apex,apex-anon"
    },
    "System Assert Fail": {
        "body": [
            "System.assert(false, $0);"
        ],
        "description": "Fail unit test when this assert is reached",
        "prefix": [
            "systemAssertFail",
            "saf"
        ],
        "scope": "apex,apex-anon"
    },
    "System Assert Not Equals": {
        "body": [
            "System.assertNotEquals(${1:expected}, ${2:actual}, ${3:message});"
        ],
        "description": "Assert that a value is not an expected value in a unit test",
        "prefix": [
            "SystemAssertNotEquals",
            "sane"
        ],
        "scope": "apex,apex-anon"
    },
    "System Assert Not Equals Null": {
        "body": [
            "System.assertNotEquals(null, $0, ${1:message});"
        ],
        "description": "Assert that a value is not null in a unit test ",
        "prefix": [
            "systemAssertNotEqualsMessage",
            "sann"
        ],
        "scope": "apex,apex-anon"
    },
    "System Debug": {
        "body": [
            "System.debug(LoggingLevel.${1|DEBUG,ERROR,WARN,INFO,FINE,FINER,FINEST,NONE|}, '$2: ' + $0);"
        ],
        "description": "Debug",
        "prefix": [
            "systemDebug",
            "sd"
        ],
        "scope": "apex,apex-anon"
    },
    "System Debug Serialize Pretty": {
        "body": [
            "System.debug(LoggingLevel.${1|DEBUG,ERROR,WARN,INFO,FINE,FINER,FINEST,NONE|}, '$2: ' + JSON.SerializePretty($0));"
        ],
        "description": "Debug objects or collections",
        "prefix": [
            "systemDebugPretty",
            "sdp"
        ],
        "scope": "apex,apex-anon"
    },
    "System Run As": {
        "body": [
            "System.runAs(${1:user}) {",
            "\t$0",
            "}"
        ],
        "description": "System Run As User statement.",
        "prefix": [
            "systemRunAs",
            "sra"
        ],
        "scope": "apex,apex-anon"
    },
    "Test Method": {
        "body": [
            "@IsTest",
            "static void ${1:testMethodName}() {",
            "\t$0",
            "\tTest.startTest();",
            "\t",
            "\tTest.stopTest();",
            "}"
        ],
        "description": "Test setup for creating data before test methods run.",
        "prefix": [
            "isTest",
            "tstm"
        ],
        "scope": "apex,apex-anon"
    },
    "TestSetup": {
        "body": [
            "@TestSetup",
            "static void setup() {",
            "\t$0",
            "}"
        ],
        "description": "Test setup for creating data before test methods run.",
        "prefix": [
            "testSetup",
            "tsts"
        ],
        "scope": "apex,apex-anon"
    },
    "Throw exception": {
        "body": [
            "throw new ${1:exceptionType}($0);"
        ],
        "description": "Throw an exception",
        "prefix": [
            "throw",
            "thr"
        ],
        "scope": "apex,apex-anon"
    },
    "Try Catch": {
        "body": [
            "try {",
            "\t$0",
            "} catch (${1:exceptionType}) {",
            "\t",
            "}"
        ],
        "description": "Try Catch statement.",
        "prefix": [
            "tryCatch",
            "tc"
        ],
        "scope": "apex,apex-anon"
    },
    "Try Catch Finally": {
        "body": [
            "try {",
            "\t$0",
            "} catch (${1:exceptionType}) {",
            "\t",
            "} finally {",
            "\t",
            "}"
        ],
        "description": "Try Catch statement.",
        "prefix": [
            "tryCatchFinally",
            "tcf"
        ],
        "scope": "apex,apex-anon"
    },
    "UserInfo.getDefaultCurrency": {
        "body": [
            "UserInfo.getDefaultCurrency();"
        ],
        "description": "Get User default currency.",
        "prefix": [
            "UserInfogetDefaultCurrency"
        ],
        "scope": "apex,apex-anon"
    },
    "UserInfo.getFirstName": {
        "body": [
            "UserInfo.getFirstName();"
        ],
        "description": "Get User first name.",
        "prefix": [
            "UserInfogetFirstName"
        ],
        "scope": "apex,apex-anon"
    },
    "UserInfo.getLanguage": {
        "body": [
            "UserInfo.getLanguage();"
        ],
        "description": "Get User language.",
        "prefix": [
            "UserInfogetLanguage"
        ],
        "scope": "apex,apex-anon"
    },
    "UserInfo.getLastName": {
        "body": [
            "UserInfo.getLastName();"
        ],
        "description": "Get User last name.",
        "prefix": [
            "UserInfogetLastName"
        ],
        "scope": "apex,apex-anon"
    },
    "UserInfo.getName": {
        "body": [
            "UserInfo.getName();"
        ],
        "description": "Get User name.",
        "prefix": [
            "UserInfogetName"
        ],
        "scope": "apex,apex-anon"
    },
    "UserInfo.getProfileId": {
        "body": [
            "UserInfo.getProfileId();"
        ],
        "description": "Get User profile id.",
        "prefix": [
            "UserInfogetProfileId"
        ],
        "scope": "apex,apex-anon"
    },
    "UserInfo.getUserEmail": {
        "body": [
            "UserInfo.getUserEmail();"
        ],
        "description": "Get User user email.",
        "prefix": [
            "UserInfogetUserEmail"
        ],
        "scope": "apex,apex-anon"
    },
    "UserInfo.getUserId": {
        "body": [
            "UserInfo.getUserId();"
        ],
        "description": "Get User user id.",
        "prefix": [
            "UserInfogetUserId"
        ],
        "scope": "apex,apex-anon"
    },
    "UserInfo.getUserType": {
        "body": [
            "UserInfo.getUserType();"
        ],
        "description": "Get User user type.",
        "prefix": [
            "UserInfogetUserType"
        ],
        "scope": "apex,apex-anon"
    },
    "While": {
        "body": [
            "while (${1:condition}) {",
            "\t$0",
            "}"
        ],
        "description": "While statement.",
        "prefix": [
            "while",
            "wh"
        ],
        "scope": "apex,apex-anon"
    }
}
