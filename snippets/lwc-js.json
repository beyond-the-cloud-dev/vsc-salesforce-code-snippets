{
    "LWC Async/Await": {
        "body": [
            "try {",
            "\tconst result = await ${1:apexMethodName}({ apexMethodParams });",
            "} catch (error) {",
            "\tconsole.error(error)",
            "}"
        ],
        "description": "Then/Catch",
        "prefix": "asyncAwait",
        "scope": "javascript"
    },
    "LWC constructor": {
        "body": [
            "constructor() {",
            "",
            "}"
        ],
        "description": "constructor.",
        "prefix": "constructor",
        "scope": "javascript"
    },
    "LWC CustomEvent": {
        "body": [
            "new CustomEvent('${1:eventName}', {",
            "\tdetail: ${2:details},",
            "\tbubbles: false,",
            "\tcomposed: false",
            "});"
        ],
        "description": "CustomEvent",
        "prefix": "customEvent",
        "scope": "javascript"
    },
    "LWC disconnectedCallback": {
        "body": [
            "disconnectedCallback() {",
            "",
            "}"
        ],
        "description": "disconnectedCallback.",
        "prefix": "disconnectedCallback",
        "scope": "javascript"
    },
    "LWC dispatchEvent": {
        "body": [
            "this.dispatchEvent(${1:customEvent});"
        ],
        "description": "dispatchEvent",
        "prefix": "dispatchEvent",
        "scope": "javascript"
    },
    "LWC ErrorCallback": {
        "body": [
            "errorCallback(error, stack) {",
            "\t",
            "}"
        ],
        "description": "errorCallback.",
        "prefix": "errorCallback",
        "scope": "javascript"
    },
    "LWC getObjectInfo": {
        "body": [
            "import { getObjectInfo } from 'lightning/uiObjectInfoApi';",
            "import ${1:objectName} from '@salesforce/schema/${2:objectApiName}';",
            "",
            "@wire(getObjectInfo, { objectApiName: ${1:objectName} })",
            "${3:propertyOrFunction};"
        ],
        "description": "getObjectInfo",
        "prefix": "getObjectInfo",
        "scope": "javascript"
    },
    "LWC getPicklistValues": {
        "body": [
            "import { getPicklistValues } from 'lightning/uiObjectInfoApi';",
            "import ${1:fieldName} from '@salesforce/schema/${2:objectApiName}.${3:fieldApiName}';",
            "",
            "@wire(getPicklistValues, { recordTypeId: '012000000000000AAA', fieldApiName: ${1:fieldName} })",
            "${4:propertyOrFunction};"
        ],
        "description": "getPicklistValues",
        "prefix": "getPicklistValues",
        "scope": "javascript"
    },
    "LWC getRecord": {
        "body": [
            "import { getRecord } from 'lightning/uiRecordApi';",
            "",
            "@wire(getRecord, { recordId: '${1:recordId}', fields: ${2:fields} })",
            "${3:propertyOrFunction};"
        ],
        "description": "getRecord",
        "prefix": "getRecord",
        "scope": "javascript"
    },
    "LWC getRecords": {
        "body": [
            "import { getRecords } from 'lightning/uiRecordApi';",
            "",
            "@wire(getRecords, { records: [ { recordIds: '${1:recordIds}', fields: ${2:fields} } ] })",
            "${3:propertyOrFunction};"
        ],
        "description": "getRecords",
        "prefix": "getRecords",
        "scope": "javascript"
    },
    "LWC Import Apex Method": {
        "body": [
            "import ${1:apexMethodName} from '@salesforce/apex/${2:Namespace}.${3:ClassName}.${4:apexMethodReference}';"
        ],
        "description": "Import apex method.",
        "prefix": "importApexMethod",
        "scope": "javascript"
    },
    "LWC Import Custom Label": {
        "body": [
            "import ${1:labelName} from '@salesforce/label/${2:labelReference}';"
        ],
        "description": "Import custom label.",
        "prefix": "importLabel",
        "scope": "javascript"
    },
    "LWC Import Field": {
        "body": [
            "import ${1:fieldName} from '@salesforce/schema/${2:objectApiName}.${3:fieldApiName}';"
        ],
        "description": "Import Field.",
        "prefix": "importField",
        "scope": "javascript"
    },
    "LWC Import Has Permission": {
        "body": [
            "import has${1:PermissionName} from '@salesforce/userPermission/${1:PermissionName}';"
        ],
        "description": "Import hasPermission.",
        "prefix": "importHasPermission",
        "scope": "javascript"
    },
    "LWC Import NavigationMixin": {
        "body": [
            "import { NavigationMixin } from 'lightning/navigation';"
        ],
        "description": "Import NavigationMixin.",
        "prefix": "importNavigationMixin",
        "scope": "javascript"
    },
    "LWC Import Object": {
        "body": [
            "import ${1:objectName} from '@salesforce/schema/${2:objectApiName}';"
        ],
        "description": "Import Object.",
        "prefix": "importObject",
        "scope": "javascript"
    },
    "LWC Import UserId": {
        "body": [
            "import userId from '@salesforce/user/Id';"
        ],
        "description": "Import UserId.",
        "prefix": "importUserId",
        "scope": "javascript"
    },
    "LWC querySelector": {
        "body": [
            "this.template.querySelector('${1:element}');"
        ],
        "description": "querySelector",
        "prefix": "querySelector",
        "scope": "javascript"
    },
    "LWC querySelectorAll": {
        "body": [
            "this.template.querySelectorAll('${1:element}');"
        ],
        "description": "querySelectorAll",
        "prefix": "querySelectorAll",
        "scope": "javascript"
    },
    "LWC render": {
        "body": [
            "render() {",
            "\t",
            "}"
        ],
        "description": "render.",
        "prefix": "render",
        "scope": "javascript"
    },
    "LWC renderedCallback": {
        "body": [
            "initialRender = true;",
            "renderedCallback() {",
            "\tif (!this.initialRender) {",
            "\t\treturn;",
            "\t}",
            "\t// Your code here.",
            "\tthis.initialRender = false;",
            "}"
        ],
        "description": "renderedCallback.",
        "prefix": "renderedCallback",
        "scope": "javascript"
    },
    "LWC ShowToastEvent": {
        "body": [
            "import { ShowToastEvent } from 'lightning/platformShowToastEvent';",
            "new ShowToastEvent({ '${1:title}', '${2:message}', '${3:variant}' });"
        ],
        "description": "ShowToastEvent.",
        "prefix": "ShowToastEvent",
        "scope": "javascript"
    },
    "LWC Static Resource": {
        "body": [
            "import ${1:resourceName} from '@salesforce/resourceUrl/${2:resourceName}';"
        ],
        "description": "Import static resource.",
        "prefix": "importStaticResource",
        "scope": "javascript"
    },
    "LWC Then/Catch": {
        "body": [
            "${1:apexMethodName}({ apexMethodParams })",
            ".then(result => {",
            "\t",
            "})",
            ".catch(error => {",
            "\tconsole.error(error)",
            "});"
        ],
        "description": "Then/Catch",
        "prefix": "thenCatch",
        "scope": "javascript"
    },
    "LWC Wire Method": {
        "body": [
            "@wire(${1:apexMethodName}, { apexMethodParams })",
            "${5:wiredName}({ error, data }) {",
            "\tif (data) {",
            "",
            "\t} else if (error) {",
            "\t\tconsole.error(error);",
            "\t}",
            "}"
        ],
        "description": "wireMethod.",
        "prefix": "wireMethod",
        "scope": "javascript"
    },
    "LWC Wire Property": {
        "body": [
            "@wire(${1:apexMethodName}, { apexMethodParams })",
            "${5:property};"
        ],
        "description": "wireProperty.",
        "prefix": "wireProperty",
        "scope": "javascript"
    }
}
